using System;
using System.Collections;
using System.Collections.Generic;
namespace Lab1_SortedLinkedList
{
    public class Node<T>
    {
        public Node(T data)
        {
            Data = data;
        }
        public T Data { get; set; }
        public Node<T> Next { get; set; }
    }
    public class SortedLinkedList<T> : IComparer<T>
    {
        Node<T> first = null;
        Node<T> last = null;
        int length;
        public int Compare(T x, T y) => Comparer.Default.Compare(x, y);
        public void AddItem(T data)
        {
            Node<T> per = first;
            Node<T> node = new Node<T>(data);
            if (first == null || Comparer.Default.Compare(per.Data, node.Data) > 0)
            {
                node.Next = per;
                first = node;
            }
            else
            {
                Node<T> cur = first;
                while (cur.Next != null && Comparer.Default.Compare(cur.Next.Data, node.Data) < 0)
                {
                    cur = cur.Next;
                }
                node.Next = cur.Next;
                cur.Next = node;
            }
            length++;
        }
        public void Delete(T data)
        {
            Node<T> pre = null;
            Node<T> cur = first;
            while(cur!=null)
            {
                if (cur.Data.Equals(data))
                {
                    if (pre != null)
                    {
                        pre.Next = cur.Next;
                        if (cur.Next == null)
                            last = pre;
                    }
                    else
                    {
                        first = first.Next;
                        if (first == null)
                            last = null;
                    }
                    length--;
                }
                pre = cur;
                cur = cur.Next;
            }
        }
        public int Length() { { return length; } }
        public void Clear()
        {
            first = null;
            last = null;
            length = 0;
        }
        public bool IsEmpty() { return length == 0; }
        public bool FindItem(T data)
        {
                Node<T> cur = first;
            while (cur != null)
            {
                if (cur.Data.Equals(data))
                    return true;
                cur = cur.Next;
            }
            return false;
        }
            public void Vyvod()
        {
            Node<T> sho = first;
            while (sho != null)
            {
                Console.WriteLine(sho.Data);
                sho = sho.Next;
            }
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            var list = new SortedLinkedList<int>();

            Console.WriteLine("Enter number of items you want to add: ");
            int numOfAddItems = Convert.ToInt32(Console.ReadLine());
            for (int i = 0; i < numOfAddItems; i++)
            {
                list.AddItem(Convert.ToInt32(Console.ReadLine()));
            }
            list.Vyvod();
            Console.WriteLine("Enter number of items you want to delete: ");
            int numOfDeleteItems = Convert.ToInt32(Console.ReadLine());
            for (int i = 0; i < numOfDeleteItems; i++)
            {
                list.Delete(Convert.ToInt32(Console.ReadLine()));
            }
            Console.WriteLine("Enter number you want to find: ");
            Console.WriteLine(list.FindItem(Convert.ToInt32(Console.ReadLine())));
            list.Vyvod();
            Console.WriteLine(list.Length());
            list.Clear();
            Console.WriteLine(list.IsEmpty());
        }
    }
}
